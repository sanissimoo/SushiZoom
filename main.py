import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

TOKEN = "7785430147:AAF9ynpzPAa9aZ3eOxBDTt0MTGtTaylZP-w"
GROUP_CHAT_ID = -1002582699976
WAITING_FOR_ADDRESS = 1

logging.basicConfig(level=logging.INFO)

def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üì¶ –ü—Ä–∏–π–Ω—è–≤ –¥–æ—Å—Ç–∞–≤–∫—É", callback_data="accepted")],
        [InlineKeyboardButton("‚è± –ó–∞—Ç—Ä–∏–º—É—é—Å—å", callback_data="delayed")],
        [InlineKeyboardButton("üìç –ü—Ä–∏–±—É–≤", callback_data="arrived")],
        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏–≤ –¥–æ—Å—Ç–∞–≤–∫—É", callback_data="completed")],
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_keyboard())

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    username = query.from_user.full_name
    data = query.data

    if data == "accepted":
        context.user_data["courier_name"] = username
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:")
        return WAITING_FOR_ADDRESS

    messages = {
        "delayed": f"‚ö†Ô∏è –ö—É—Ä‚Äô—î—Ä –∑–∞—Ç—Ä–∏–º—É—î—Ç—å—Å—è\nüë§ {username}",
        "arrived": f"üìç –ö—É—Ä‚Äô—î—Ä –ø—Ä–∏–±—É–≤ –Ω–∞ –º—ñ—Å—Ü–µ\nüë§ {username}",
        "completed": f"‚úÖ –î–æ—Å—Ç–∞–≤–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ\nüë§ {username}",
    }

    if data in messages:
        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=messages[data])
    return ConversationHandler.END

async def receive_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    address = update.message.text
    courier = context.user_data.get("courier_name", "–ù–µ–≤—ñ–¥–æ–º–∏–π")
    message = (
        f"üöö –ö—É—Ä‚Äô—î—Ä –ø—Ä–∏–π–Ω—è–≤ –¥–æ—Å—Ç–∞–≤–∫—É\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {address}\n"
        f"üë§ –ö—É—Ä‚Äô—î—Ä: {courier}"
    )
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message)
    await update.message.reply_text("–ê–¥—Ä–µ—Å—É –ø—Ä–∏–π–Ω—è—Ç–æ ‚úÖ")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_button)],
        states={
            WAITING_FOR_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_address)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == "__main__":
    main()
